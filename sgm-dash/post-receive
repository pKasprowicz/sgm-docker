#!/usr/bin/env python

import sys
import os
import subprocess

class cd:
    """Context manager for changing the current working directory"""
    def __init__(self, newPath):
        self.newPath = os.path.expanduser(newPath)

    def __enter__(self):
        self.savedPath = os.getcwd()
        os.chdir(self.newPath)

    def __exit__(self, etype, value, traceback):
        os.chdir(self.savedPath)

# configuration
deploy_to_path = '/var/www/sgm/dashboard/'
deploy_branch  = 'master'
broker_dir = './broker'

def install_dependencies():
     with cd(deploy_to_path):
        print "Installing dependencies..."
        result = subprocess.call(['npm', 'install'],stdout=nullOutput,stderr=nullOutput)

def reload_service(service_name):
    with cd(deploy_to_path):
        print 'Stopping service ' + service_name
        result = subprocess.call(['pm2', 'delete', service_name])

        result = subprocess.call(['pm2', 'start', './ecosystem.json', '--only', service_name])
        if (0 == result):
            print 'Service reloaded successfully'
            result = 0
        else:
            print 'Error on process reloading'
            result = 1
        return result

def dir_has_changed(directory):
    with cd(deploy_to_path):
        result = subprocess.call(['git', 'diff-index', '--quiet', 'HEAD^', directory])
        return result



def post_receive(from_commit, to_commit, branch_name):
    # Don't deploy if pushed branch != deploy_branch
    if not branch_name.endswith(deploy_branch):
        print('Received branch ' + branch_name + ', not deploying.')
        sys.exit()

    print '\r'
    print '-------------------------------------DEPLOYMENT PROCESS BEGIN-------------------------------------'
    print 'Branch name     : ' + branch_name
    print 'Commit id       : ' + to_commit
    print 'Deployment path : ' + deploy_to_path
    print '\r'
    # copy files to deploy directory
    result = subprocess.call('GIT_WORK_TREE="' + deploy_to_path + '" git checkout -f ' + branch_name, shell=True)
    if (0 == result):
        print 'New version copied to ' + deploy_to_path

    # reload service in production env
    result = reload_service('SGMdashboard')

    if(1 == result):
        print 'Deployment error : unable to restart service SGMdashboard'
        return 1

    if (1 == dir_has_changed(broker_dir)):
        print 'SGMbroker sources has been changed'
        result = reload_service('SGMbroker')

        if (1 == result):
            print 'Deployment error : unable to restart service SGMbroker'
            return 1
    else:
        print 'No changes to SGM broker detected - no need to restart'

    print 'Deployment finished successfully'

    print '--------------------------------------DEPLOYMENT PROCESS END--------------------------------------'
    print '\r'

if __name__ == '__main__':
    # get values from STDIN
    fc,tc,bn = sys.stdin.read().split()
    post_receive(fc, tc, bn)
